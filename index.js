module.exports = {
    root: true,
    parser: '@typescript-eslint/parser',
    plugins: ['@typescript-eslint', '@diia-inhouse', 'import', 'jest', 'promise', 'regexp'],
    extends: [
        'eslint:recommended',
        'airbnb-typescript/base',
        'plugin:n/recommended',
        'plugin:jest/recommended',
        'plugin:jest/style',
        'plugin:promise/recommended',
        'plugin:anti-trojan-source/recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:prettier/recommended',
        'plugin:regexp/recommended',
        'plugin:unicorn/recommended',
    ],
    parserOptions: {
        ecmaVersion: 2022,
        project: ['./tsconfig.json', './migrations/tsconfig.json', './tests/tsconfig.json'],
    },
    ignorePatterns: ['migrations/sample-migration.ts'],
    rules: {
        'n/no-missing-import': 'off',
        'n/no-unpublished-import': [
            'error',
            {
                ignoreTypeImport: true,
            },
        ],
        'prettier/prettier': 'error',
        'linebreak-style': ['error', 'unix'],
        'class-methods-use-this': 'off',
        'comma-dangle': ['off'],
        'no-duplicate-imports': 'error',
        'no-redeclare': 'error',
        'space-before-blocks': 'error',
        'space-infix-ops': 'error',
        'no-implicit-coercion': 'error',
        'import/prefer-default-export': 'off',
        'eol-last': ['error', 'always'],
        'import/order': [
            'error',
            {
                pathGroups: [
                    {
                        pattern: '@diia-inhouse/diia-app',
                        group: 'external',
                        position: 'after',
                    },
                    {
                        pattern: '@diia-inhouse/**',
                        group: 'external',
                        position: 'after',
                    },
                    {
                        pattern: '@src/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@actions/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@services/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@providers/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@models/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@dataMappers/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@utils',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@utils/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@mocks/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@tests/**',
                        group: 'internal',
                        position: 'before',
                    },
                    {
                        pattern: '@interfaces/**',
                        group: 'internal',
                        position: 'before',
                    },
                ],
                pathGroupsExcludedImportTypes: [],
                'newlines-between': 'always',
                alphabetize: {
                    order: 'asc',
                    caseInsensitive: true,
                },
            },
        ],
        'import/newline-after-import': ['error'],
        'newline-before-return': ['error'],
        'no-cond-assign': ['error', 'always'],
        'no-console': 'error',
        'lines-between-class-members': 'off',
        'consistent-return': ['off'],
        'padding-line-between-statements': [
            'error',
            {
                blankLine: 'always',
                prev: '*',
                next: 'return',
            },
            {
                blankLine: 'always',
                prev: ['const', 'let'],
                next: '*',
            },
            {
                blankLine: 'any',
                prev: ['const', 'let'],
                next: 'block-like',
            },
            {
                blankLine: 'any',
                prev: ['const', 'let'],
                next: ['const', 'let'],
            },
            {
                blankLine: 'always',
                prev: 'block-like',
                next: '*',
            },
            {
                blankLine: 'never',
                prev: 'case',
                next: '*',
            },
            {
                blankLine: 'always',
                prev: '*',
                next: 'export',
            },
        ],
        'object-curly-newline': ['off'],
        'no-underscore-dangle': ['error', { allow: ['_id'] }],
        '@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'angle-bracket' }],
        '@typescript-eslint/typedef': 'off',
        '@typescript-eslint/explicit-function-return-type': ['error'],
        'no-return-await': 'off',
        '@typescript-eslint/return-await': ['error', 'always'],
        curly: ['error', 'all'],
        '@typescript-eslint/array-type': ['error'],

        'jest/no-conditional-in-test': 'error',
        'jest/no-duplicate-hooks': 'error',
        'jest/prefer-hooks-in-order': 'error',
        'jest/prefer-hooks-on-top': 'error',
        'jest/prefer-lowercase-title': ['error', { ignoreTopLevelDescribe: true }],
        'jest/require-to-throw-message': 'error',
        'jest/require-top-level-describe': 'error',

        eqeqeq: ['error', 'always'],
        'spaced-comment': ['error', 'always'],
        '@typescript-eslint/explicit-member-accessibility': ['error', { accessibility: 'no-public' }],
        '@typescript-eslint/no-inferrable-types': 'error',
        '@diia-inhouse/logger-err-field': 'error',
        'sort-imports': ['error', { allowSeparatedGroups: true, ignoreDeclarationSort: true }],
        'regexp/no-obscure-range': 'off',
        'unicorn/consistent-destructuring': 'error',
        'unicorn/custom-error-definition': 'error',
        'unicorn/no-anonymous-default-export': 'off',
        'unicorn/no-null': 'off',
        'unicorn/prefer-module': 'off',
        'unicorn/prefer-top-level-await': 'off',
        'unicorn/prevent-abbreviations': 'off',
        'unicorn/no-array-method-this-argument': 'off',
        'unicorn/no-array-callback-reference': 'off',
        'unicorn/prefer-spread': 'off',
        'unicorn/filename-case': ['error', { case: 'camelCase', ignore: ['^\\d+.*\\.ts$'] }],
        'unicorn/numeric-separators-style': ['error', { number: { onlyIfContainsSeparator: true } }],
        'unicorn/catch-error-name': ['error', { name: 'err' }],
    },
}
